enclave {
    trusted {
		/* add secret to sealed file */
		public void add_secret(int secret);
		public void print_secrets();
    };
	
	include "stdio.h"
	include "mystdio.h"
    untrusted {
		/* "pointers returned by an ECALL or OCALL function are not checked by
		    the edge-routines and must be verified by the enclave code" (sdk guide) */

		/* logging */
		void log_ocall([in, string] char* message); /* INSECURE - leaks plaintext data */
		void print_ocall([in, string] char* message);

		/* FILE* lives in untrusted memory */
		/* file functions */
 		void rewind_ocall([user_check] FILE* file);
 		int fseek_ocall([user_check] FILE* file, long offset, int origin);
 		long ftell_ocall([user_check] FILE* file);

		/* two versions: either write mem living in enclave, or in application */
 		size_t fwrite_enclave_memory_ocall([in, size=size, count=count] const void* buffer, size_t size, size_t count, [user_check] FILE* stream);
 		/*size_t fwrite_untrusted_memory_ocall([user_check] const void* buffer, size_t size, size_t count, [user_check] FILE* stream);*/

		/* two versions: copy buffer into enclave, or leave buffer in applcation */
 		size_t fread_copy_into_enclave_memory_ocall([out, size=size, count=count] void* buffer, size_t size, size_t count, [user_check] FILE* stream);
 		/*size_t fread_leave_in_untrusted_memory_ocall([user_check] void* buffer, size_t size, size_t count, [user_check] FILE* stream);*/

 		int fclose_ocall([user_check] FILE* stream);
 		FILE* fopen_ocall([in,string] const char* filename, [in,string] const char* mode);


		/* GENERATE OCALL CODE AFTER THIS LINE */
	};
};
